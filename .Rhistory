data@experimentData['posMedian', probeColumn] <- .cellAverage(x = data@assayData[,probeColumn],
threshold = thresholds[p],
type = "pos", algorithm = "median")
data@experimentData['posMode', probeColumn] <- .cellAverage(x = data@assayData[,probeColumn],
threshold = thresholds[p],
type = "pos", algorithm = "mode")
data@experimentData['posCount', probeColumn] <- .cellCount(x = data@assayData[,probeColumn],
threshold = thresholds[p],
type = "pos")
data@experimentData['negCount', probeColumn] <- .cellCount(x = data@assayData[,probeColumn],
threshold = thresholds[p],
type = "neg")
data@posCellData[, probeColumn] <- data@assayData[, probeColumn] >= thresholds[p]
}
data@experimentData['posRatio', ] <- (100/data@experimentData['totalCount', ]) * data@experimentData['posCount', ]
data@experimentData['negRatio', ] <- (100/data@experimentData['totalCount', ]) * data@experimentData['negCount', ]
data@experimentData['totalRatio', ] <- data@experimentData['posRatio', ] + data@experimentData['negRatio', ]
data@experimentData <- round(data@experimentData, digits = 2)
return(data)
}
updateThreshold <- function(data = NULL, probe = NULL, threshold = NULL,
plot = TRUE, col = "red", verbose = TRUE){
if((class(data)[1] == "MPIFdata") != TRUE){
stop ("data structure is not in the correct format.\n\n")
}
if(is.null(probe) == TRUE){
stop("No probe name was given to update.\n ")
}
if(is.null(threshold) == TRUE){
stop("No threshold data was given for update.\n ")
}
probeColumn <- grep(colnames(data@assayData), pattern = probe, ignore.case = TRUE, fixed = FALSE)
data@experimentData['threshold', probeColumn] <- threshold
data <- .updateMPIFdata(data = data)
if(plot == TRUE){
plotCells(data = data, probe = probe, posCol = col)
}
return(data)
}
overview(data )
updateThreshold(data, probe = "cd8", threshold = 20)
test <- updateThreshold(data, probe = "cd8", threshold = 20)
test <- updateThreshold(data, probe = "cd8", threshold = 15)
test <- updateThreshold(data, probe = "cd8", threshold = 50)
test <- updateThreshold(data, probe = "cd8", threshold = 78)
test <- updateThreshold(data, probe = "cd8", threshold = 20)
test <- updateThreshold(data, probe = "cd8", threshold = 20, col = "green")
test <- updateThreshold(data, probe = "cd8", threshold = 20, col = "lightgreen")
test <- updateThreshold(data, probe = "cd8", threshold = 20, col = "orange")
test <- updateThreshold(data, probe = "cd8", threshold = 70, col = "orange")
overview(test)
pos = TRUE
dim(data@assayData)
assayData <- data@assayData[, probe1Column == pos]
posCellData <- data@posCellData[, probe1Column == pos]
xyData <- data@xyData[, probe1Column == pos]
experimentData <- data@experimentData
dim(assayData)
assayData <- data@assayData[probe1Column == TRUE, ]
posCellData <- data@posCellData[probe1Column == TRUE, ]
xyData <- data@xyData[probe1Column == TRUE, ]
experimentData <- data@experimentData
assayData
data@posCellData[,probe1Column]
data@posCellData[,probe1Column] == pos
pos = FALSE
data@posCellData[,probe1Column] == pos
assayData <- data@assayData[pata@posCellData[,probe1Column] == pos, ]
assayData <- data@assayData[data@posCellData[,probe1Column] == pos, ]
head(assayData)
dim(assayData)
posCellData <- data@posCellData[data@posCellData[,probe1Column] == pos, ]
xyData <- data@xyData[data@posCellData[,probe1Column] == pos, ]
experimentData <- data@experimentData
dim(posCellData)
head(posCellData)
probe1Column
unique(posCellData[,7])
subsetData <- new('MPIFdata', assayData = assayData, posCellData = posCellData,
xyData = xyData, experimentData = experimentData,
phenoData = phenoData)
subsetData <- .updateMPIFdata(subsetData)
plotCells(subsetData)
plotCells(subsetData, "cd3")
plotCells(subsetData, "cd8")
apply(X = data@posCellData, MARGIN = 2, FUN = sum)
head(posCellData)
sum(data[,1] == TRUE)
results <-
positiveCells <- apply(X = subset@posCellData, MARGIN = 2, FUN = sum, )
results <-
positiveCells <- apply(X = subsetData@posCellData, MARGIN = 2, FUN = sum, )
results <-
positiveCells <- apply(X = subsetData@posCellData, MARGIN = 2, FUN = sum)
results <-
positiveCells <- apply(X = subsetData@posCellData, MARGIN = 2, FUN = sum)
results <-
positiveCells <- apply(X = subsetData@posCellData, MARGIN = 2, FUN = sum)
positiveCells <- apply(X = subsetData@posCellData, MARGIN = 2, FUN = sum)
postitiveCells
positiveCells
cellsNeg <- cellsPos - dim(subsetData@posCellData)[1]
cellsPos <- apply(X = subsetData@posCellData, MARGIN = 2, FUN = sum)
cellsNeg <- cellsPos - dim(subsetData@posCellData)[1]
cellsNeg
dim(subsetData@posCellData)[1]
cellsNeg <- rep(dim(subsetData@posCellData)[1], length(cellsPos)) - cellsPos
cellsNeg
paste0(probe1,suffix, ", ", probe2,"+")
if(positive == TRUE){
suffix <- "+"
} else {
suffix = "-"}
positive <- TRUE
rownamePos <- paste0(probe1,suffix, ", ", probe2,"+")
rownameNeg <- paste0(probe1,suffix, ", ", probe2,"-")
if(positive == TRUE){
suffix <- "+"
} else {
suffix = "-"}
rownamePos <- paste0(probe1,suffix, ", ", probe2,"+")
rownameNeg <- paste0(probe1,suffix, ", ", probe2,"-")
rownamePos
rownameNeg
result <- matrix(data = NA, ncol = dim(subsetData@assayData),
nrow = 3, dimnames = list(c(rownamePos, rownameNeg, "Total Cells"),
colnames(subsetData@assayData)))
result <- matrix(data = NA, ncol = dim(subsetData@assayData)[2],
nrow = 3, dimnames = list(c(rownamePos, rownameNeg, "Total Cells"),
colnames(subsetData@assayData)))
result
results <- matrix(data = NA, ncol = dim(subsetData@assayData)[2],
nrow = 3, dimnames = list(c(rownamePos, rownameNeg, "Total Cells"),
colnames(subsetData@assayData)))
results
results[1,] <- apply(X = subsetData@posCellData, MARGIN = 2, FUN = sum)
results[2,] <- rep(dim(subsetData@posCellData)[1], length(cellsPos)) - cellsPos
results[3,] <- rep(dim(subsetData@posCellData)[1])
results
paste0(probe1,suffix)
write.file <- paste0(data@phenoData['samplename',1], "_", paste0(probe1,suffix),".xlsx")
write.file
subsetProbe <- function(data = NULL, probe1 = NULL, output = "data",
positive = TRUE, write = FALSE,
file = NULL,
path = NULL,
verbose = TRUE){
if((class(data)[1] == "MPIFdata") != TRUE){
stop ("data structure is not in the correct format.\n\n")
}
if(is.null(probe1) == TRUE){
stop("Probe 1 was not given.\n")
}
if(is.null(probe2) == TRUE){
stop("Secondary probe was not given.\n")
}
probe1Column <- grep(colnames(assayData), pattern = probe1, ignore.case = TRUE, fixed = FALSE)
if(length(probe1) != 1){
stop("The probes can not be found or a not distinct enough to get single match.\n")
}
assayData <- data@assayData[data@posCellData[,probe1Column] == positive, ]
posCellData <- data@posCellData[data@posCellData[,probe1Column] == positive, ]
xyData <- data@xyData[data@posCellData[,probe1Column] == positive, ]
experimentData <- data@experimentData
subsetData <- new('MPIFdata', assayData = assayData, posCellData = posCellData,
xyData = xyData, experimentData = experimentData,
phenoData = phenoData)
subsetData <- .updateMPIFdata(subsetData)
if(positive == TRUE){
suffix <- "+"
} else {
suffix = "-"}
rownamePos <- paste0(probe1,suffix, ", ", probe2,"+")
rownameNeg <- paste0(probe1,suffix, ", ", probe2,"-")
results <- matrix(data = NA, ncol = dim(subsetData@assayData)[2],
nrow = 3, dimnames = list(c(rownamePos, rownameNeg, "Total Cells"),
colnames(subsetData@assayData)))
results[1,] <- apply(X = subsetData@posCellData, MARGIN = 2, FUN = sum)
results[2,] <- rep(dim(subsetData@posCellData)[1], length(cellsPos)) - cellsPos
results[3,] <- rep(dim(subsetData@posCellData)[1])
if(write == TRUE){
if(is.null(path) == TRUE){
if(verbose == TRUE){
cat("No data path was given. Using path in phenoData.\n")
}
path <- data@phenoData['filepath', 1]
}
if(is.null(file) == TRUE){
if(verbose == TRUE){
cat("No file name was given. Will generate a generic output file.\n")
}
}
file <- paste0(data@phenoData['samplename',1], "_", paste0(probe1,suffix),".xlsx")
outputfile <- file.path(path, file)
if(verbose == TRUE){
cat("Writing Experiment Data to the following location:\n")
print(path)
}
write.xlsx(x = data@experimentData, file = outputfile)
}
if(output == "data"){
return(subsetData)
}
if(output == "results")
return(results)
}
subsetProbe <- function(data = NULL, probe = NULL, output = "data",
positive = TRUE, write = FALSE,
file = NULL,
path = NULL,
verbose = TRUE){
if((class(data)[1] == "MPIFdata") != TRUE){
stop ("data structure is not in the correct format.\n\n")
}
if(is.null(probe) == TRUE){
stop("Probe 1 was not given.\n")
}
probeColumn <- grep(colnames(assayData), pattern = probe, ignore.case = TRUE, fixed = FALSE)
if(length(probe) != 1){
stop("The probes can not be found or a not distinct enough to get single match.\n")
}
assayData <- data@assayData[data@posCellData[,probeColumn] == positive, ]
posCellData <- data@posCellData[data@posCellData[,probeColumn] == positive, ]
xyData <- data@xyData[data@posCellData[,probeColumn] == positive, ]
experimentData <- data@experimentData
subsetData <- new('MPIFdata', assayData = assayData, posCellData = posCellData,
xyData = xyData, experimentData = experimentData,
phenoData = phenoData)
subsetData <- .updateMPIFdata(subsetData)
if(positive == TRUE){
suffix <- "+"
} else {
suffix = "-"}
rownamePos <- paste0(probe,suffix, ", ", probe2,"+")
rownameNeg <- paste0(probe,suffix, ", ", probe2,"-")
results <- matrix(data = NA, ncol = dim(subsetData@assayData)[2],
nrow = 3, dimnames = list(c(rownamePos, rownameNeg, "Total Cells"),
colnames(subsetData@assayData)))
results[1,] <- apply(X = subsetData@posCellData, MARGIN = 2, FUN = sum)
results[2,] <- rep(dim(subsetData@posCellData)[1], length(cellsPos)) - cellsPos
results[3,] <- rep(dim(subsetData@posCellData)[1])
if(write == TRUE){
if(is.null(path) == TRUE){
if(verbose == TRUE){
cat("No data path was given. Using path in phenoData.\n")
}
path <- data@phenoData['filepath', 1]
}
if(is.null(file) == TRUE){
if(verbose == TRUE){
cat("No file name was given. Will generate a generic output file.\n")
}
}
file <- paste0(data@phenoData['samplename',1], "_", paste0(probe,suffix),".xlsx")
outputfile <- file.path(path, file)
if(verbose == TRUE){
cat("Writing Experiment Data to the following location:\n")
print(path)
}
write.xlsx(x = data@experimentData, file = outputfile)
}
if(output == "data"){
return(subsetData)
}
if(output == "results")
return(results)
}
subsetProbe(data = test, probe = "cd3", output = "data", positive = TRUE)
cd3Results <- subsetProbe(data = test, probe = "cd3", output = "data", positive = TRUE)
cd3Results
cd3Results <- subsetProbe(data = test, probe = "cd3", output = "result", positive = TRUE)
cd3Results
subsetProbe <- function(data = NULL, probe = NULL, output = "data",
positive = TRUE, write = FALSE,
file = NULL,
path = NULL,
verbose = TRUE){
if((class(data)[1] == "MPIFdata") != TRUE){
stop ("data structure is not in the correct format.\n\n")
}
if(is.null(probe) == TRUE){
stop("Probe 1 was not given.\n")
}
probeColumn <- grep(colnames(assayData), pattern = probe, ignore.case = TRUE, fixed = FALSE)
if(length(probe) != 1){
stop("The probes can not be found or a not distinct enough to get single match.\n")
}
assayData <- data@assayData[data@posCellData[,probeColumn] == positive, ]
posCellData <- data@posCellData[data@posCellData[,probeColumn] == positive, ]
xyData <- data@xyData[data@posCellData[,probeColumn] == positive, ]
experimentData <- data@experimentData
subsetData <- new('MPIFdata', assayData = assayData, posCellData = posCellData,
xyData = xyData, experimentData = experimentData,
phenoData = phenoData)
subsetData <- .updateMPIFdata(subsetData)
if(positive == TRUE){
suffix <- "+"
} else {
suffix = "-"}
rownamePos <- paste0(probe,suffix, ", ", probe2,"+")
rownameNeg <- paste0(probe,suffix, ", ", probe2,"-")
results <- matrix(data = NA, ncol = dim(subsetData@assayData)[2],
nrow = 3, dimnames = list(c(rownamePos, rownameNeg, "Total Cells"),
colnames(subsetData@assayData)))
results[1,] <- apply(X = subsetData@posCellData, MARGIN = 2, FUN = sum)
results[2,] <- rep(dim(subsetData@posCellData)[1], length(cellsPos)) - cellsPos
results[3,] <- rep(dim(subsetData@posCellData)[1])
if(write == TRUE){
if(is.null(path) == TRUE){
if(verbose == TRUE){
cat("No data path was given. Using path in phenoData.\n")
}
path <- data@phenoData['filepath', 1]
}
if(is.null(file) == TRUE){
if(verbose == TRUE){
cat("No file name was given. Will generate a generic output file.\n")
}
}
file <- paste0(data@phenoData['samplename',1], "_", paste0(probe,suffix),".xlsx")
outputfile <- file.path(path, file)
if(verbose == TRUE){
cat("Writing Experiment Data to the following location:\n")
print(path)
}
write.xlsx(x = data@experimentData, file = outputfile)
}
if(output == "data"){
return(subsetData)
}
if(output == "results"){
return(results)
}
}
cd3Results <- subsetProbe(data = test, probe = "cd3", output = "result", positive = TRUE)
cd3Results
cd3Results <- subsetProbe(data = test, probe = "cd3", output = "result", positive = TRUE)
cd3Results
dim(test)
data
cd3Results <- subsetProbe(data = data, probe = "cd3", output = "result", positive = TRUE)
cd3Results
if((class(data)[1] == "MPIFdata") != TRUE){
stop ("data structure is not in the correct format.\n\n")
}
if(is.null(probe) == TRUE){
stop("Probe 1 was not given.\n")
}
probeColumn <- grep(colnames(data@assayData), pattern = probe, ignore.case = TRUE, fixed = FALSE)
if(length(probe) != 1){
stop("The probes can not be found or a not distinct enough to get single match.\n")
}
assayData <- data@assayData[data@posCellData[,probeColumn] == positive, ]
posCellData <- data@posCellData[data@posCellData[,probeColumn] == positive, ]
xyData <- data@xyData[data@posCellData[,probeColumn] == positive, ]
experimentData <- data@experimentData
subsetData <- new('MPIFdata', assayData = assayData, posCellData = posCellData,
xyData = xyData, experimentData = experimentData,
phenoData = phenoData)
subsetData <- .updateMPIFdata(subsetData)
subset()
if(positive == TRUE){
suffix <- "+"
} else {
suffix = "-"}
rownamePos <- paste0(probe,suffix, ", ", probe2,"+")
rownameNeg <- paste0(probe,suffix, ", ", probe2,"-")
results <- matrix(data = NA, ncol = dim(subsetData@assayData)[2],
nrow = 3, dimnames = list(c(rownamePos, rownameNeg, "Total Cells"),
colnames(subsetData@assayData)))
results[1,] <- apply(X = subsetData@posCellData, MARGIN = 2, FUN = sum)
results[2,] <- rep(dim(subsetData@posCellData)[1], length(cellsPos)) - cellsPos
results[3,] <- rep(dim(subsetData@posCellData)[1])
results
subsetProbe <- function(data = NULL, probe = NULL, output = "data",
positive = TRUE, write = FALSE,
file = NULL,
path = NULL,
verbose = TRUE){
if((class(data)[1] == "MPIFdata") != TRUE){
stop ("data structure is not in the correct format.\n\n")
}
if(is.null(probe) == TRUE){
stop("Probe 1 was not given.\n")
}
probeColumn <- grep(colnames(data@assayData), pattern = probe, ignore.case = TRUE, fixed = FALSE)
if(length(probe) != 1){
stop("The probes can not be found or a not distinct enough to get single match.\n")
}
assayData <- data@assayData[data@posCellData[,probeColumn] == positive, ]
posCellData <- data@posCellData[data@posCellData[,probeColumn] == positive, ]
xyData <- data@xyData[data@posCellData[,probeColumn] == positive, ]
experimentData <- data@experimentData
subsetData <- new('MPIFdata', assayData = assayData, posCellData = posCellData,
xyData = xyData, experimentData = experimentData,
phenoData = phenoData)
subsetData <- .updateMPIFdata(subsetData)
if(positive == TRUE){
suffix <- "+"
} else {
suffix = "-"}
rownamePos <- paste0(probe,suffix, ", ", probe2,"+")
rownameNeg <- paste0(probe,suffix, ", ", probe2,"-")
results <- matrix(data = NA, ncol = dim(subsetData@assayData)[2],
nrow = 3, dimnames = list(c(rownamePos, rownameNeg, "Total Cells"),
colnames(subsetData@assayData)))
results[1,] <- apply(X = subsetData@posCellData, MARGIN = 2, FUN = sum)
results[2,] <- rep(dim(subsetData@posCellData)[1], length(cellsPos)) - cellsPos
results[3,] <- rep(dim(subsetData@posCellData)[1])
if(write == TRUE){
if(is.null(path) == TRUE){
if(verbose == TRUE){
cat("No data path was given. Using path in phenoData.\n")
}
path <- data@phenoData['filepath', 1]
}
if(is.null(file) == TRUE){
if(verbose == TRUE){
cat("No file name was given. Will generate a generic output file.\n")
}
}
file <- paste0(data@phenoData['samplename',1], "_", paste0(probe,suffix),".xlsx")
outputfile <- file.path(path, file)
if(verbose == TRUE){
cat("Writing Experiment Data to the following location:\n")
print(path)
}
write.xlsx(x = data@experimentData, file = outputfile)
}
if(output == "data"){
return(subsetData)
} else {
return(results)
}
}
test <- subsetProbe(data, probe = "cd3", output = "data")
overview(test)
test <- subsetProbe(data, probe = "cd3", output = "data", positive = FALSE)
overview(test)
.updateMPIFdata <- function(data = NULL){
if((class(data)[1] == "MPIFdata") != TRUE){
stop ("data structure is not in the correct format.\n\n")
}
probes <- colnames(data@assayData)
thresholds <- data@experimentData['threshold', ]
for(p in 1:length(probes)){
probeColumn <- grep(colnames(assayData), pattern = probes[p], ignore.case = TRUE, fixed = FALSE)
data@experimentData['posMean', probeColumn] <- .cellAverage(x = data@assayData[,probeColumn],
threshold = thresholds[p],
type = "pos", algorithm = "mean")
data@experimentData['posMedian', probeColumn] <- .cellAverage(x = data@assayData[,probeColumn],
threshold = thresholds[p],
type = "pos", algorithm = "median")
data@experimentData['posMode', probeColumn] <- .cellAverage(x = data@assayData[,probeColumn],
threshold = thresholds[p],
type = "pos", algorithm = "mode")
data@experimentData['posCount', probeColumn] <- .cellCount(x = data@assayData[,probeColumn],
threshold = thresholds[p],
type = "pos")
data@experimentData['negCount', probeColumn] <- .cellCount(x = data@assayData[,probeColumn],
threshold = thresholds[p],
type = "neg")
data@posCellData[, probeColumn] <- data@assayData[, probeColumn] >= thresholds[p]
}
data@experimentData['totalCount', ] <- dim(data@assayData)[1]
data@experimentData['posRatio', ] <- (100/data@experimentData['totalCount', ]) * data@experimentData['posCount', ]
data@experimentData['negRatio', ] <- (100/data@experimentData['totalCount', ]) * data@experimentData['negCount', ]
data@experimentData['totalRatio', ] <- data@experimentData['posRatio', ] + data@experimentData['negRatio', ]
data@experimentData <- round(data@experimentData, digits = 2)
return(data)
}
test <- subsetProbe(data, probe = "cd3", output = "data", positive = FALSE)
overview(test)
test <- subsetProbe(data, probe = "cd3", output = "result", positive = FALSE)
test
subsetProbe(data, probe = "cd3", output = "result", positive = FALSE)@experimentData
subsetProbe(data, probe = "cd3", output = "result", positive = FALSE)['experimentData']
str(test)
str(data)
subsetProbe(data, probe = "cd3", output = "result", positive = FALSE)@['experimentData']
subsetProbe(data, probe = "cd3", output = "result", positive = FALSE)@'experimentData'
subsetProbe(data, probe = "cd3", output = "result", positive = FALSE)@experimentData
subsetProbe(data, probe = "cd3", output = "data", positive = FALSE)@experimentData
phenoData['probeSubset'] == TRUE
phenoData
phenoData['samplename']
subsetProbe <- function(data = NULL, probe = NULL, output = "data",
positive = TRUE, verbose = TRUE){
if((class(data)[1] == "MPIFdata") != TRUE){
stop ("data structure is not in the correct format.\n\n")
}
if(is.null(probe) == TRUE){
stop("Probe 1 was not given.\n")
}
probeColumn <- grep(colnames(data@assayData), pattern = probe, ignore.case = TRUE, fixed = FALSE)
if(length(probe) != 1){
stop("The probes can not be found or a not distinct enough to get single match.\n")
}
assayData <- data@assayData[data@posCellData[,probeColumn] == positive, ]
posCellData <- data@posCellData[data@posCellData[,probeColumn] == positive, ]
xyData <- data@xyData[data@posCellData[,probeColumn] == positive, ]
experimentData <- data@experimentData
phenoData <- data@phenoData
# [ ] add subset probe to phenoData to know what has been done to subset.
subsetData <- new('MPIFdata', assayData = assayData, posCellData = posCellData,
xyData = xyData, experimentData = experimentData,
phenoData = phenoData)
subsetData <- .updateMPIFdata(subsetData)
return(subsetData)
}
test <- subsetProbe(data, "cd8")
plotCells(test, "cd8")
